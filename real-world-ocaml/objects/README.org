* Objects
** When to use Objects
   - First class modules are more expressive(A module can include
     types, while classes and objects cannot)
   - Modules, functors and data types also offer a wide range of ways
     to express program structure.
   - Objects vs Records
     - Objects don't require type definitions
     - Support for row polymorphism
     - Heavy syntax
     - Runtime cost
     - Objects can use the benefits of class system like inheritance
       and open recursion.
** Subtyping
*** Width Subtyping
    - Width subtyping means that an object type A is a subtype of B,
      if A has all of the methods of B and possibly more.
*** Depth Subtyping
    - Allows us to coerce an object if its individual methods could
      safely be coerced.
    - Example: <m:t1> is a subtype of <m:t2> if t1 is a subtype of t2.
*** Polymorphic Variant Subtyping
    - Subtyping can also be used to coerce a polymorphic variant into
      a larger polymorphic type.
